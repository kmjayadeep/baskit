name: Build Flutter APK and App Bundle

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.0.1, etc.
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
        cache: true

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          app/android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('app/android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('app/android/**/build.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache Pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          app/.dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('app/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r27c
        add-to-path: false
        
    - name: Setup Release Keystore
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Decode base64 keystore and save it in runner temp directory
        echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > ${{ runner.temp }}/keystore.jks

        # Create key.properties file for release signing
        cat > app/android/key.properties << EOF
        storePassword=${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.KEY_PASSWORD }}
        keyAlias=${{ secrets.KEY_ALIAS }}
        storeFile=${{ runner.temp }}/keystore.jks
        EOF

    - name: Get Flutter dependencies
      working-directory: ./app
      run: flutter pub get
      
    - name: Analyze Flutter code
      working-directory: ./app
      run: flutter analyze
      
    - name: Run Flutter tests
      working-directory: ./app
      run: flutter test
      
    - name: Build Debug APK
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      working-directory: ./app
      run: flutter build apk --debug --target-platform android-arm64
      
    - name: Upload Debug APK
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-apk
        path: app/build/app/outputs/flutter-apk/app-debug.apk
        retention-days: 7

    - name: Build Release APK
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: ./app
      run: flutter build apk --release --split-per-abi --obfuscate --split-debug-info=build/app/outputs/symbols

    - name: Build Release App Bundle
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: ./app
      run: flutter build appbundle --release --obfuscate --split-debug-info=build/app/outputs/symbols
        
    - name: Upload Release APK as Artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apks
        path: app/build/app/outputs/flutter-apk/app-*-release.apk
        retention-days: 30

    - name: Upload Release App Bundle as Artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: app-release-aab
        path: app/build/app/outputs/bundle/release/app-release.aab
        retention-days: 30

    - name: Upload Debug Symbols as Artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: debug-symbols
        path: app/build/app/outputs/symbols/
        retention-days: 30

    - name: Package Debug Symbols
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: ./app
      run: |
        cd build/app/outputs/symbols
        zip -r ../../../../debug-symbols.zip .
        cd ../../../../

    - name: Clean up keystore files
      if: always() && startsWith(github.ref, 'refs/tags/')
      run: |
        rm -f ${{ runner.temp }}/keystore.jks
        rm -f app/android/key.properties

    - uses: ncipollo/release-action@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        artifacts: |
          app/build/app/outputs/flutter-apk/app-*-release.apk
          app/build/app/outputs/bundle/release/app-release.aab
          app/debug-symbols.zip
        name: Baskit ${{ github.ref_name }}
        body: |
          ## ðŸ“± Download
          - **APKs**: Multiple architecture-specific APKs (Android - Direct Installation)
            - `app-arm64-v8a-release.apk` (64-bit ARM - Most modern devices)
            - `app-armeabi-v7a-release.apk` (32-bit ARM - Older devices)
            - `app-x86_64-release.apk` (x86 64-bit - Emulators/tablets)
          - **App Bundle**: `app-release.aab` (Google Play Store Release)
          - **Debug Symbols**: `debug-symbols.zip` (For Google Play Console crash reporting)

          ## ðŸ”§ Build Info
          - **Flutter Version**: 3.29.3
          - **Build Type**: Release (Signed with keystore, Obfuscated)
          - **Debug Symbols**: Included for crash reporting
          - **Commit**: ${{ github.sha }}

          ## ðŸ“‹ Installation Options

          ### Direct Installation (APK)
          1. Download the appropriate APK for your device:
             - **Most users**: `app-arm64-v8a-release.apk` (64-bit ARM)
             - **Older devices**: `app-armeabi-v7a-release.apk` (32-bit ARM)
             - **Emulators/tablets**: `app-x86_64-release.apk` (x86 64-bit)
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK on your device

          ### Google Play Store (App Bundle)
          - The `app-release.aab` file is ready for upload to Google Play Console
          - This format allows Google Play to generate optimized APKs for different device configurations
          - Provides smaller download sizes and better performance

          ### Debug Symbols Upload (Google Play Console)
          1. Go to Google Play Console â†’ Your App â†’ App Bundle Explorer
          2. Select the uploaded App Bundle version
          3. Click "Upload debug symbols"
          4. Upload the `debug-symbols.zip` file
          5. This enables detailed crash reports and ANR analysis

          ---
          *Generated automatically by GitHub Actions*
        generateReleaseNotes: true
